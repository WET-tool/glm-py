name: build-and-deploy

on:
  push:
  pull_request:
    branches:
      - manylinux 
  
# on:
#   push:
#     tags:
#       - v*

jobs:
  build-source-dist:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9 

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel build

    - name: Bundled executable and build package
      shell: bash
      run: |
        BASE_URL="https://raw.githubusercontent.com/AquaticEcoDynamics/glm-aed/main/binaries/"
        mkdir -p glmpy/bin
        if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
          curl -L -o glmpy/bin/glm "$BASE_URL"ubuntu/22.04/glm_latest/glm""
        elif [[ "${{ matrix.os }}" == "ubuntu-20.04" ]]; then
          curl -L -o glmpy/bin/glm "$BASE_URL"ubuntu/20.04/glm_latest/glm""
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          curl -L -o glmpy/bin/glm.exe "$BASE_URL"windows/glm_latest/glm.exe""
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          curl -L -o glmpy/bin/glm "$BASE_URL"macos/Monterey/glm_latest/glm""
        fi
        chmod +x glmpy/bin/*
        python -m build

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.os }}
        path: dist/

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Build on manylinux
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run --rm -v $(pwd)/glm:/glm quay.io/pypa/manylinux2014_x86_64 /bin/bash -c "\
              git clone --recursive https://github.com/AquaticEcoDynamics/glm-aed.git && \
              yum install epel-release -y && \
              yum update && \
              yum install -y netcdf netcdf-devel gd gd-devel gcc-gfortran libjpeg-turbo hdf5 hdf5-devel libaec libaec-devel libXpm glibc libpng-1.5.13-8.el7.i686 && \
              cd glm-aed/glm-source && \
              mkdir binaries && \
              ./build_glm.sh
              cp /glm-aed/glm-source/binaries/glm_latest/glm /glm/ && \
              cp /usr/lib64/libgd.so.2 /glm/ && \
              cp /usr/lib64/libjpeg.so.62 /glm/ && \
              cp /usr/lib64/libnetcdf.so.7 /glm/ && \
              cp /usr/lib64/libhdf5.so.8 /glm/ && \
              cp /usr/lib64/libhdf5_hl.so.8 /glm/ && \
              cp /usr/lib64/libsz.so.2 /glm/ && \
              cp /usr/lib64/libaec.so.0 /glm/ &&
              cp /usr/lib64/libXpm.so.4 /glm/ &&
              cp /usr/lib64/libdl.so.2 /glm/ &&
              cp /usr/lib64/libc.so.6 /glm/ &&
              cp /usr/lib64/libm.so.6 /glm/ &&
              cp /usr/lib64/libpng15.so.15 /glm/"

          mkdir -p glmpy/bin
          sudo mv glm/glm glmpy/bin/
          sudo chmod +x glmpy/bin/*
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/glm
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: 'cp39-*_x86_64 cp310-*_x86_64 cp311-*_x86_64 cp312-*_x86_64 pp39-*_x86_64 p310-*_x86_64 cp39-*_aarch64 cp310-*_aarch64 cp311-*_aarch64 cp312-*_aarch64 pp39-*_aarch64 p310-*_aarch64'
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT: "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/glm"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl



      # - name: Bundle executable 
      #   shell: bash
      #   run: |
      #     BASE_URL="https://raw.githubusercontent.com/AquaticEcoDynamics/glm-aed/main/binaries/"
      #     mkdir -p glmpy/bin
      #     if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
      #       curl -L -o glmpy/bin/glm "$BASE_URL"ubuntu/22.04/glm_latest/glm""
      #     elif [[ "${{ matrix.os }}" == "ubuntu-20.04" ]]; then
      #       curl -L -o glmpy/bin/glm "$BASE_URL"ubuntu/20.04/glm_latest/glm""
      #     elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
      #       curl -L -o glmpy/bin/glm.exe "$BASE_URL"windows/glm_latest/glm.exe""
      #     elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
      #       curl -L -o glmpy/bin/glm "$BASE_URL"macos/Monterey/glm_latest/glm""
      #     fi

      # - name: Build wheels
      #   uses: pypa/cibuildwheel@v2.16.2
      


  # deploy:
  #   needs: [build-source-dist, build-wheels]
  #   runs-on: ubuntu-latest

  #   environment:
  #     name: pypi
  #     url: https://pypi.org/p/glm-py  # Replace <package-name> with your PyPI project name
  #   permissions:
  #     contents: write  # IMPORTANT: mandatory for making GitHub Releases
  #     id-token: write  # IMPORTANT: mandatory for trusted publishing

  #   steps:
  #     - name: Download Artifacts (Ubuntu 22.04)
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist-ubuntu-22.04
  #         path: dist/

  #     - name: Download Artifacts (Ubuntu 20.04)
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist-ubuntu-20.04
  #         path: dist/

  #     - name: Download Artifacts (Windows)
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist-windows-latest
  #         path: dist/

  #     - name: Download Artifacts (MacOS)
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist-macos-latest
  #         path: dist/
      
  #     - name: Publish distribution ðŸ“¦ to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
      
      # - name: Create GitHub Release
      #   run: >-
      #     gh release create
      #     '${{ github.ref_name }}'
      #     --notes ""

      # - name: Upload to GitHub Release
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   # Upload to GitHub Release using the `gh` CLI.
      #   # `dist/` contains the built packages, and the
      #   # sigstore-produced signatures and certificates.
      #   run: >-
      #     gh release upload
      #     '${{ github.ref_name }}' dist/**
      #     --repo '${{ github.repository }}'





